// Спроєктувати класи для представлення двійкового дерева пошуку, із літер заданого рядка, що не повторюються.
// Реалізувати необхідні конструктори, метод виведення дерева, інші методи для виконання поставленого завдання. 
// Визначити в якому піддереві (лівому або правому) кількість парних елементів більша.
// Вивести ці елементи на екран для кожного піддерева окремо.
// Програма повинна забезпечувати наочне виведення усіх вхідних, вихідних та проміжних даних, а також контроль 
// можливих помилок. Для обробки помилок (у тому числі не коректного введення даних) використати виключні ситуації.

// 19:14

#include "functions.h"
using namespace std;

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	string str;
	cout << "Введіть рядок: "; cin >> str;
	string newStr = deleteRecurringSymbs(str);
	cout << "\nУведений рядок з видаленими символами, що повторюються: " << newStr;

	BinarySearchTree Tree(newStr);
	cout << "\n\nУтворене дерево:\n\n";
	Tree.printTree();

// 19:37
	
	int flag = Tree.whereMoreEvenNums();
	switch (flag) {
	case 1:
		cout << "\n\nКількість парних елементів більша у лівому піддереві.";
		break;
	case 2:
		cout << "\n\nКількість парних елементів більша у правому піддереві.";
		break;
	default:
		cout << "\n\nКількість парних елементів однакова у лівому та правому піддеревах.";
	}

//19:58

	cout << "\n\nПарні елементи лівого піддерева: ";
	Tree.printEvenNums(Tree.Root->left);
	cout << "\n\nПарні елементи правого піддерева: ";
	Tree.printEvenNums(Tree.Root->right);
	cout << "\n\n";

// 20:05

	Tree.clearMemory();

	system("pause");
	return 0;
}
